{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","React","clockState","setClockState","session","setSession","breakLength","setBreakLength","minutes","setMinutes","seconds","setSeconds","timeLeft","setTimeLeft","clockId","setClockId","previousSession","setPreviousSession","clearAlert","document","getElementById","currentTime","alert","play","getTimeRemaining","endTime","t","Date","parse","Math","floor","initializeClock","updateClock","slice","total","clearInterval","timeInterval","setTimeout","setInterval","runClock","id","useEffect","Fragment","className","onClick","parseInt","style","color","pause","preload","src","href","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4caa9846.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst App = () => {\n  const useState = React.useState;\n  const [clockState, setClockState] = useState('stopped');\n  const [session, setSession] = useState(25);\n  const [breakLength, setBreakLength] = useState(5);\n  const [minutes, setMinutes] = useState(0);\n  const [seconds, setSeconds] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(0);\n  const [clockId, setClockId] = useState('');\n  const [previousSession, setPreviousSession] = useState('break');\n\n  const clearAlert = () => {\n    document.getElementById('beep').currentTime = 0;\n  }\n\n  const alert = () => {\n    document.getElementById('beep').play();\n    clearAlert();\n  }\n\n  // Calculates remaining time for clock\n  const getTimeRemaining = (endTime) => {\n    const t = Date.parse(endTime) - Date.parse(new Date());\n    const seconds = Math.floor((t / 1000) % 60);\n    let minutes = Math.floor((t / 1000 / 60) % 60);\n    const hours = Math.floor((t / (1000 * 60 * 60)) % 24);\n\n    if (hours === 1) {\n      minutes = '60'\n    }\n\n    return {\n      'total': t,\n      'minutes': minutes,\n      'seconds': seconds\n    };\n  }\n\n  // Starts clock with sent values\n  const initializeClock = (endTime) => {\n\n    // updates clock data every second\n    function updateClock() {\n      const t = getTimeRemaining(endTime);\n      setMinutes(('0' + t.minutes).slice(-2));\n      setSeconds(('0' + t.seconds).slice(-2));\n      setTimeLeft(t.total);\n      if (t.total <= 0) {\n        alert();\n        clearInterval(timeInterval);\n        setTimeout(() => {\n          previousSession === 'break' ? setPreviousSession('session') : setPreviousSession('break');\n        }, 1000);\n\n      }\n    }\n\n    updateClock();\n    let timeInterval = setInterval(updateClock, 1000);\n    return timeInterval;\n  }\n\n  // controls clock operations like pause and play\n  const runClock = (endTime) => {\n    if (clockState === 'running' && clockId !== '' && timeLeft !== 0) {\n      setClockState('paused');\n      clearInterval(clockId);\n    } else if (clockState === 'paused' && timeLeft > 0) {\n      const id = initializeClock(new Date(Date.parse(new Date()) + (minutes * 60 * 1000) + (seconds * 1000)));\n      setClockId(id);\n      setClockState('running');\n    } else {\n      const id = initializeClock(new Date(Date.parse(new Date()) + endTime * 60 * 1000))\n      // const id = initializeClock(previousSession === 'break' ? new Date(Date.parse(new Date()) + session * 60 * 1000) : new Date(Date.parse(new Date()) + breakLength * 60 * 1000));\n      setClockId(id);\n      setClockState('running');\n    }\n  }\n\n  React.useEffect(() => {\n    setMinutes(session < 10 ? \"0\" + session : session);\n    setSeconds('00');\n\n    if (clockState === 'running') {\n      runClock(breakLength);\n    }\n    // eslint-disable-next-line\n  }, [session, breakLength, previousSession]);\n\n  return (\n    <React.Fragment>\n      <h1>pomodoro clock</h1>\n      <div id=\"subheadings\">\n        <div>\n          <h3 id=\"break-label\">break length</h3>\n          <div className=\"length-values\">\n            <button\n              id=\"break-decrement\"\n              onClick={() => clockState === 'stopped' && breakLength > 1 && setBreakLength(parseInt(breakLength) - 1)}\n            >\n              &minus;\n\t\t\t\t\t\t</button>\n            <span id=\"break-length\">{breakLength}</span>\n            <button\n              id=\"break-increment\"\n              onClick={() => clockState === 'stopped' && breakLength < 60 && setBreakLength(parseInt(breakLength) + 1)}\n            >\n              &#43;\n\t\t\t\t\t\t</button>\n          </div>\n        </div>\n        <div>\n          <h3 id=\"session-label\">session length</h3>\n          <div className=\"length-values\">\n            <button id=\"session-decrement\" onClick={() => clockState === 'stopped' && session > 1 && setSession(parseInt(session) - 1)}>\n              &minus;\n\t\t\t\t\t\t</button>\n            <span id=\"session-length\">{session}</span>\n            <button\n              id=\"session-increment\"\n              onClick={() => clockState === 'stopped' && session < 60 && setSession(parseInt(session) + 1)}\n            >\n              &#43;\n\t\t\t\t\t\t</button>\n          </div>\n        </div>\n      </div>\n      <div id=\"clock\">\n        <h3 id=\"timer-label\">{previousSession === 'break' ? 'session' : 'break'}</h3>\n        <p id=\"time-left\" style={(timeLeft < 60000 && timeLeft > 0) ? { color: 'red' } : {}}>\n          <span id=\"minutes\">{clockState === 'stopped' ? (session < 10 ? '0' + session : session) : minutes}</span>\n          :\n          <span id=\"seconds\">{clockState === 'stopped' ? '00' : seconds}</span>\n        </p>\n        <span>\n          <button id=\"start_stop\" onClick={() => {\n            runClock(session);\n          }}>\n            {\n              clockState === 'running' ? <>&#10074;&#10074;</> :\n                <>&#9654;</>\n            }\n          </button>{' '}\n          <button\n            id=\"reset\"\n            onClick={() => {\n              document.getElementById('beep').pause();\n              setClockState('stopped');\n              clearInterval(clockId);\n              setPreviousSession('break');\n              setSession('25');\n              setBreakLength('5');\n              setTimeLeft(0);\n              clearAlert();\n\n            }}\n          >\n            &#10226;\n          </button>\n        </span>\n        <audio id=\"beep\" preload=\"auto\"\n          src=\"https://goo.gl/65cBl1\"\n        />\n      </div>\n      <footer>\n        designed & coded by <a href=\"https://www.github.com/kumarvaibhav45\">kumar vaibhav</a>\n      </footer>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}